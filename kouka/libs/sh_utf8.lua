-- <|> Hello, fucker | Taxin2012 and PURP was here | Mysterious Zone Project | mzrp.ru <|>
if SERVER then AddCSLuaFile("utf8data.lua")end include("utf8data.lua")local function a(k,l)local m=k:byte(l)if m>0 and m<=127 then return true,1 elseif m>=194 and m<=223 then local n=k:byte(l+1)if not n then return false,"UTF-8 string terminated early"end if n<128 or n>191 then return false,"Invalid UTF-8 character"end return true,2 elseif m>=224 and m<=239 then local n=k:byte(l+1)local o=k:byte(l+2)if not n or not o then return false,"UTF-8 string terminated early"end if m==224 and(n<160 or n>191)then return false,"Invalid UTF-8 character"elseif m==237 and(n<128 or n>159)then return false,"Invalid UTF-8 character"elseif n<128 or n>191 then return false,"Invalid UTF-8 character"end if o<128 or o>191 then return false,"Invalid UTF-8 character"end return true,3 elseif m>=240 and m<=244 then local n=k:byte(l+1)local o=k:byte(l+2)local p=k:byte(l+3)if not n or not o or not p then return false,"UTF-8 string terminated early"end if m==240 and(n<144 or n>191)then return false,"Invalid UTF-8 character"elseif m==244 and(n<128 or n>143)then return false,"Invalid UTF-8 character"elseif n<128 or n>191 then return false,"Invalid UTF-8 character"end if o<128 or o>191 then return false,"Invalid UTF-8 character"end if p<128 or p>191 then return false,"Invalid UTF-8 character"end return true,4 else return false,"Invalid UTF-8 character"end end local function b(k,l)local n,o=a(k,l)if not n then error(o)end return o end local function d(k)if type(k)~="string"then error("bad argument #1 to 'utf8len' (string expected, got "..type(k)..")")end local l=1 local n=k:len()local o=0 while l<=n do local p,q=a(k,l)if not p then return false end l=l+q o=o+1 end return o end string.utf8len=d local function e(k,l)if type(k)~="string"then error("bad argument #1 to 'utf8lenlimit' (string expected, got "..type(k)..")")end local n=1 local o=k:len()local p=0 while n<=o and p<=l do local q,r=a(k,n)if not q then return false end n=n+r p=p+1 end return p end string.utf8lenlimit=e local function f(k,l,n)n=n or-1 if not isstring(k)then error("bad argument #1 to 'utf8sub' (string expected, got "..type(k)..")")end if not isnumber(l)then error("bad argument #2 to 'utf8sub' (number expected, got "..type(l)..")")end if not isnumber(n)then error("bad argument #3 to 'utf8sub' (number expected, got "..type(n)..")")end local o=1 local p=k:len()local q=0 local r=(l>=0 and n>=0)or k:utf8len()local s=(l>=0)and l or r+l+1 local t=(n>=0)and n or r+n+1 if s>t then return""end local u,v=1,p while o<=p do q=q+1 if q==s then u=o end o=o+b(k,o)if q==t then v=o-1 break end end return k:sub(u,v)end string.utf8sub=f local function g(k,l)if not isstring(k)then error("bad argument #1 to 'utf8replace' (string expected, got "..type(k)..")")end if not istable(l)then error("bad argument #2 to 'utf8replace' (table expected, got "..type(l)..")")end local n=1 local o=k:len()local p local q=""while n<=o do p=b(k,n)local r=k:sub(n,n+p-1)q=q..(l[r]or r)n=n+p end return q end local function h(k)return g(k,utf8_lc_uc)end if utf8_lc_uc then string.utf8upper=h end local function i(k)return g(k,utf8_uc_lc)end if utf8_uc_lc then string.utf8lower=i end local function j(k)if not isstring(k)then error("bad argument #1 to 'utf8reverse' (string expected, got "..type(k)..")")end local l=k:len()local n=l local o local p=""while n>0 do c=k:byte(n)while c>=128 and c<=191 do n=n-1 c=k:byte(n)end o=b(k,n)p=p..k:sub(n,n+o-1)n=n-1 end return p end string.utf8reverse=j function string:uValid()return string.utf8len(self)and true or false end function string:uForce()return utf8.force(self)end function string:uLen()return string.utf8len(self)end function string:uLenLimit(k)return string.utf8lenlimit(self,k)end function string:uSub(k,l)return string.utf8sub(self,k,l)end function string:uLeft(k)return self:uSub(1,k)end function string:uRight(k)return self:uSub(-k)end function string:uLower()return string.utf8lower(self)end function string:uUpper()return string.utf8upper(self)end function string:isEmpty()return string.utf8len(self)==0 end function string:uCapitalize()return self:uLeft(1):uUpper()..self:uSub(2)end function net.ReadStringU()return net.ReadString():uForce()end